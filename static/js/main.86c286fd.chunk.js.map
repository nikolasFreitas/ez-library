{"version":3,"sources":["Components/Header/helpers/DrawerContent.js","Components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["DrawerContent","_ref","classes","toggleDrawer","react_default","a","createElement","className","list","role","onClick","onKeyDown","List","map","text","index","ListItem","button","key","ListItemIcon","MoveToInbox_default","Mail_default","ListItemText","primary","Divider","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","width","fullList","Header","_useState","useState","_useState2","Object","slicedToArray","drawerOpen","setDrawerOpen","_React$useState","React","_React$useState2","anchorEl","setAnchorEl","open","event","type","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Menu_default","Typography","variant","Button","currentTarget","Menu_Menu","Boolean","onClose","Drawer","App","Components_Header","react_router_dom","react_router","isLocalhost","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.86c286fd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\n\nconst DrawerContent = ({classes, toggleDrawer}) => (\n  <div\n    className={classes.list}\n    role=\"presentation\"\n    onClick={toggleDrawer(false)}\n    onKeyDown={toggleDrawer(false)}\n\t>\n    <List>\n      {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\n        <ListItem button key={text}>\n          <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n          <ListItemText primary={text} />\n        </ListItem>\n      ))}\n    </List>\n    <Divider />\n    <List>\n      {['All mail', 'Trash', 'Spam'].map((text, index) => (\n        <ListItem button key={text}>\n          <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n          <ListItemText primary={text} />\n        </ListItem>\n      ))}\n    </List>\n  </div>\n);\n\nDrawerContent.propTypes = {\n\tclasses: PropTypes.object.isRequired,\n\ttoggleDrawer: PropTypes.func.isRequired\n}\n\nexport default DrawerContent;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Drawer from '@material-ui/core/Drawer';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport { DrawerContent } from './helpers';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n}));\n\nconst Header = () => {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const toggleDrawer = open => event => {\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n      return;\n    }\n\n    setDrawerOpen(open);\n  };\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const classes = useStyles();\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\n          <MenuIcon onClick={toggleDrawer(true)} />\n        </IconButton>\n        <Typography variant=\"h6\" className={classes.title}>\n          EZ library\n        </Typography>\n        <Button color=\"inherit\" onClick={handleClick}>\n          Login\n        </Button>\n        <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>\n          <p>OIEEEEE</p>\n        </Menu>\n      </Toolbar>\n      <Drawer open={drawerOpen} onClose={toggleDrawer(false)}>\n        {DrawerContent({ classes, toggleDrawer })}\n      </Drawer>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Header from './Components/Header';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Router>\n        <Switch>\n\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}